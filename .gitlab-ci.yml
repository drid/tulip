stages:
  - test
  - build
  - package
  - release
  - deploy

variables:
  BUILDER_IMAGE: electronuserland/builder:latest
  BUILDER_IMAGE_WIN: electronuserland/builder:20-wine-mono-07.24
  PKG_PATH: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$APPNAME/$VERSION
  SNAP_NAME: tulip-roadbook

unit-testing:
  stage: test
  image: ${BUILDER_IMAGE}
  before_script:
    - npm install electron-builder
  script:
    - npm test

build-win:
  stage: build
  image: ${BUILDER_IMAGE_WIN}
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
  before_script:
    - apt-get update -y
    - apt-get install --no-install-recommends -y gcc-multilib g++-multilib fonts-liberation fonts-liberation2 inkscape
    - npm install electron-builder
  script:
    - npm run convert-svg
    - npm run build-win
  artifacts:
    name: $CI_COMMIT_REF_SLUG
    paths:
      - $CI_PROJECT_DIR/dist/*.*
    when: on_success

build-linux:
  stage: build
  image: ${BUILDER_IMAGE}
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
  before_script:
    - apt-get update -y
    - apt-get install -y fakeroot fonts-liberation fonts-liberation2 inkscape
    - npm install electron-builder
  script:
    - export VERSION=$(node -e "console.log(require('./package.json').version)")
    - echo "VERSION=$VERSION" >> variables.env
    - export APPNAME=$(node -e "console.log(require('./package.json').productName)")
    - echo "APPNAME=$APPNAME" >> variables.env
    - export SENTRY_AUTH_TOKEN
    - npm run convert-svg
    - npm run build-linux
  artifacts:
    reports:
      dotenv: variables.env
    name: $CI_COMMIT_REF_SLUG
    paths:
      - $CI_PROJECT_DIR/dist/*.*
    when: on_success

# build-mac:
#   stage: build
#   image: ${BUILDER_IMAGE}
#   before_script:
#     - npm install
#   script:
#     - export VERSION=$(node -e "console.log(require('./package.json').version)")
#     - echo "VERSION=$VERSION" >> variables.env
#     - export APPNAME=$(node -e "console.log(require('./package.json').productName)")
#     - echo "APPNAME=$APPNAME" >> variables.env
#     - npm run build-mac
#   artifacts:
#     reports:
#       dotenv: variables.env
#     name: $CI_COMMIT_REF_SLUG
#     paths:
#       - $CI_PROJECT_DIR/out/*.*
#     when: on_success

upload_package:
  stage: package
  image: curlimages/curl:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$/ && $CI_COMMIT_TAG'
  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$APPNAME $VERSION.exe" "$PKG_PATH/${APPNAME}_${VERSION}.exe"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$APPNAME $VERSION.msi" "$PKG_PATH/${APPNAME}_${VERSION}.msi"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/$APPNAME $VERSION ia32.msi" "$PKG_PATH/${APPNAME}_${VERSION}_32bit.msi"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}_${VERSION}_amd64.snap" "$PKG_PATH/${APPNAME}_${VERSION}_amd64.snap"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}.AppImage" "$PKG_PATH/${APPNAME}-${VERSION}.AppImage"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}-armv7l.AppImage" "$PKG_PATH/${APPNAME}-${VERSION}-armv7l.AppImage"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}-arm64.AppImage" "$PKG_PATH/${APPNAME}-${VERSION}-arm64.AppImage"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}_${VERSION}_amd64.deb" "$PKG_PATH/${APPNAME}_${VERSION}_amd64.deb"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}_${VERSION}_arm64.deb" "$PKG_PATH/${APPNAME}_${VERSION}_arm64.deb"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}_${VERSION}_armv7l.deb" "$PKG_PATH/${APPNAME}_${VERSION}_armv7l.deb"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}.x86_64.rpm" "$PKG_PATH/${APPNAME}-${VERSION}.x86_64.rpm"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}.aarch64.rpm" "$PKG_PATH/${APPNAME}-${VERSION}.aarch64.rpm"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "dist/${APPNAME}-${VERSION}.armv7l.rpm" "$PKG_PATH/${APPNAME}-${VERSION}.armv7l.rpm"'

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$/ && $CI_COMMIT_TAG'
  script:
    - echo "running release_job"
    - apk add bash curl python3
    - curl -sL https://sentry.io/get-cli/ | bash
    - export SENTRY_ORG=drid
    - export SENTRY_PROJECT=tulip
    - export SENTRY_AUTH_TOKEN
    - sentry-cli releases new "$VERSION"
    - sentry-cli releases set-commits "$VERSION" --auto --ignore-missing
    - sentry-cli releases finalize "$VERSION"
  release:
    name: "Release $TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "Created using the release-cli\n Go to $PKG_PATH for all packages"
    ref: "$CI_COMMIT_SHA"
    assets:
      links:
        - name: "Windows EXE"
          url: "$PKG_PATH/${APPNAME}_${VERSION}.exe"
          link_type: package
        - name: "Windows MSI"
          url: "$PKG_PATH/${APPNAME}_${VERSION}.msi"
          link_type: package
        - name: "Windows MSI 32bit"
          url: "$PKG_PATH/${APPNAME}_${VERSION}_32bit.msi"
          link_type: package
        - name: "snap"
          url: "$PKG_PATH/${APPNAME}_${VERSION}_amd64.snap"
          link_type: package
        - name: "AppImage"
          url: "$PKG_PATH/${APPNAME}-${VERSION}.AppImage"
          link_type: package
        - name: "${APPNAME}_${VERSION}_amd64.deb"
          url: "$PKG_PATH/${APPNAME}_${VERSION}_amd64.deb"
          link_type: package
        - name: "${APPNAME}_${VERSION}_x86_64.rpm"
          url: "$PKG_PATH/${APPNAME}-${VERSION}.x86_64.rpm"
          link_type: package

